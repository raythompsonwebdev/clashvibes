window.onload = function() {
  var ctx = new AudioContext();
  var audio = document.getElementById('result_player');
  var audioSrc = ctx.createMediaElementSource(audio);
  var analyser = ctx.createAnalyser();
  // we have to connect the MediaElementSource with the analyser 
  audioSrc.connect(analyser);
  // we could configure the analyser: e.g. analyser.fftSize (for further infos read the spec)
 
  // frequencyBinCount tells you how many values you'll receive from the analyser
  var frequencyData = new Uint8Array(analyser.frequencyBinCount);
 
  // we're ready to receive some data!
  // loop
  function renderFrame() {
     requestAnimationFrame(renderFrame);
     // update data in frequencyData
     analyser.getByteFrequencyData(frequencyData);
     // render frame based on values in frequencyData
     // console.log(frequencyData)
  }
  audio.start();
  renderFrame();
};


Code Examples:**********************************************************************************

$(document).ready(function() {
  $("#jpId").jPlayer( {
    ready: function () {
      $(this).jPlayer("setMedia", {mp3: "mp3/elvis.mp3"});
    },
    cssSelectorAncestor: "", // Remove the ancestor css selector clause
    cssSelector: {
      play:"#myOldPlayButton" // Set a custom css selector for the play button
      // The other defaults remain unchanged
    }
  })
 
  // ... Some time later, otherwise you'd just set it in the constructor ...
 
  $("#jpId").jPlayer( "option", "cssSelector", "play", "#myNewPlayButton" );
});


Code Examples:***********************************************************************************

$(document).ready(function() {
  $("#jpId").jPlayer( {
    ready: function () {
      $(this).jPlayer("setMedia", {mp3: "mp3/elvis.mp3"});
    },
    cssSelectorAncestor: "#interface-on-the-left" // Define the ancestor css selector
  })
 
  // ... Some time later, otherwise you'd just set it in the constructor ...
 
  $("#jpId").jPlayer( "option", "cssSelectorAncestor", "#interface-on-the-right" );
});

***************************************************************************************************

jPlayer's Predefined CSS Selectors

jPlayer has a predefined set of CSS selectors built in. Below are the default associations between the jPlayer method and the CSS selector.

To define custom CSS selectors use the constructor options:
jPlayer({cssSelectorAncestor: "#my-unique-id", cssSelector: {...}})

To change CSS selectors after instancing, use jPlayer("option", key, value):
jPlayer("option", "cssSelector", method, selector)
jPlayer("option", "cssSelectorAncestor", selector)

Default cssSelectorAncestor
cssSelectorAncestor: "#jp_container_1"
Default cssSelector
method: "selector"

cssSelector: {
  videoPlay: ".jp-video-play",
  play: ".jp-play",
  pause: ".jp-pause",
  stop: ".jp-stop",
  seekBar: ".jp-seek-bar",
  playBar: ".jp-play-bar",
  mute: ".jp-mute",
  unmute: ".jp-unmute",
  volumeBar: ".jp-volume-bar",
  volumeBarValue: ".jp-volume-bar-value",
  volumeMax: ".jp-volume-max",
  playbackRateBar: ".jp-playback-rate-bar",
  playbackRateBarValue: ".jp-playback-rate-bar-value",
  currentTime: ".jp-current-time",
  duration: ".jp-duration",
  title: ".jp-title",
  fullScreen: ".jp-full-screen",
  restoreScreen: ".jp-restore-screen",
  repeat: ".jp-repeat",
  repeatOff: ".jp-repeat-off",
  gui: ".jp-gui",
  noSolution: ".jp-no-solution"
}
Disable a Selector
To disable a selector, use an empty string.

cssSelector: {
  title: ""
}
Selector String Coding
selector = cssSelectorAncestor + " " + cssSelector[method];

For example, the play method's default actual selector is: "#jp_container_1 .jp-play"
In English, this means select the entity with class jp-play that has an ancestor with the id jp_container_1.

Remember that ids are unique, while classes are common. An id should only ever be used once in the HTML.

Default stateClass
jPlayer represents its state by adding classes to the jPlayer({cssSelectorAncestor}). For example, when jPlayer is playing, the class jp-state-playing is added to the cssSelectorAncestor, and it is removed when jPlayer is paused. These state classes are maintained for both skin types, irrespective of the jPlayer({useStateClassSkin}) option.

This class state system cannot be disabled. Do not attempt to disable a state class by using an empty string, since that may break your design by removing all classes on the jPlayer({cssSelectorAncestor}).

state: "classname"

stateClass: {
  playing: "jp-state-playing",
  seeking: "jp-state-seeking",
  muted: "jp-state-muted",
  looped: "jp-state-looped",
  fullScreen: "jp-state-full-screen",
  noVolume: "jp-state-no-volume"
}
There is currently some duplication in the options for the full-screen classes stateClass.fullScreen and sizeFull.cssClass. Currently, both classes are added when entering full-screen and removed when leaving it. The difference being that the size.cssClass is added when not in full-screen.



************************************************************************************************

<!DOCTYPE html>
<html>
<head>
  <link type="text/css" href="/dist/skin/pink.flag/css/jplayer.pink.flag.min.css" rel="stylesheet" />
  <script type="text/javascript" src="/js/jquery.min.js"></script>
  <script type="text/javascript" src="/js/jquery.jplayer.min.js"></script>
  <script type="text/javascript">
    $(document).ready(function(){
      $("#jquery_jplayer_1").jPlayer({
        ready: function () {
          $(this).jPlayer("setMedia", {
            title: "Bubble",
            m4a: "http://www.jplayer.org/audio/m4a/Miaow-07-Bubble.m4a",
            oga: "http://www.jplayer.org/audio/ogg/Miaow-07-Bubble.ogg"
          });
        },
        cssSelectorAncestor: "#jp_container_1",
        swfPath: "/js",
        supplied: "m4a, oga",
        useStateClassSkin: true,
        autoBlur: false,
        smoothPlayBar: true,
        keyEnabled: true,
        remainingDuration: true,
        toggleDuration: true
      });
    });
  </script>
</head>
<body>
<div id="jquery_jplayer_1" class="jp-jplayer"></div>
<div id="jp_container_1" class="jp-audio" role="application" aria-label="media player">
  <div class="jp-type-single">
    <div class="jp-gui jp-interface">
      <div class="jp-volume-controls">
        <button class="jp-mute" role="button" tabindex="0">mute</button>
        <button class="jp-volume-max" role="button" tabindex="0">max volume</button>
        <div class="jp-volume-bar">
          <div class="jp-volume-bar-value"></div>
        </div>
      </div>
      <div class="jp-controls-holder">
        <div class="jp-controls">
          <button class="jp-play" role="button" tabindex="0">play</button>
          <button class="jp-stop" role="button" tabindex="0">stop</button>
        </div>
        <div class="jp-progress">
          <div class="jp-seek-bar">
            <div class="jp-play-bar"></div>
          </div>
        </div>
        <div class="jp-current-time" role="timer" aria-label="time">&nbsp;</div>
        <div class="jp-duration" role="timer" aria-label="duration">&nbsp;</div>
        <div class="jp-toggles">
          <button class="jp-repeat" role="button" tabindex="0">repeat</button>
        </div>
      </div>
    </div>
    <div class="jp-details">
      <div class="jp-title" aria-label="title">&nbsp;</div>
    </div>
    <div class="jp-no-solution">
      <span>Update Required</span>
      To play the media you will need to either update your browser to a recent version or update your <a href="http://get.adobe.com/flashplayer/" target="_blank">Flash plugin</a>.
    </div>
  </div>
</div>
</body>
</html>

$('#jp').jPlayer({
   timeupdate: function(event) { // 4Hz
      // Restrict playback to first 60 seconds.
      if (event.jPlayer.status.currentTime > 60) {
         $(this).jPlayer('stop');
      }
   }
   // Then other options, such as: ready, swfPath, supplied and so on.
});


var jp = $('#jp'), jpData = jp.data('jPlayer');
setInterval(function() {
   // Restrict playback to first 60 seconds.
   if (jpData.status.currentTime > 60) {
      jp.jPlayer('stop');
   }
},100); // 10Hz


